name: Infrastructure

on:
  push:
    branches:
      - main
      - renovate/*
    tags:
      - v*
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}/infrastructure
  REGISTRY: ghcr.io

jobs:
  qa:
    name: Run QA
    strategy:
      matrix:
        VERSION_AWS_CLI:
          # renovate: datasource=github-tags depName=aws/aws-cli versioning=semver
          - "2.13.26"
        VERSION_PYTHON:
          # renovate: datasource=github-tags depName=python/cpython versioning=semver-coerced
          - "3.11.2"
        VERSION_TERRAFORM:
          # renovate: datasource=github-releases depName=hashicorp/terraform versioning=hashicorp
          - "1.6.0"

    runs-on: ubuntu-20.04
    # Container needs to be able to read repo and publish packages.
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Log in to the container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.description=AWS IaC Tooling
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/oliversalzburg/containers
            org.opencontainers.image.title=infrastructure
            org.opencontainers.image.version=${{ github.ref_name }}
          tags: |
            type=edge,branch=main,suffix=_terraform-${{ matrix.VERSION_TERRAFORM }}_awcli-${{ matrix.VERSION_AWS_CLI }}_python-${{ matrix.VERSION_PYTHON }}
            type=ref,event=pr,suffix=_terraform-${{ matrix.VERSION_TERRAFORM }}_awcli-${{ matrix.VERSION_AWS_CLI }}_python-${{ matrix.VERSION_PYTHON }}
            type=ref,event=tag,suffix=_terraform-${{ matrix.VERSION_TERRAFORM }}_awcli-${{ matrix.VERSION_AWS_CLI }}_python-${{ matrix.VERSION_PYTHON }}

      - name: Build and push container image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
        with:
          context: contexts/infrastructure
          push: ${{ github.event_name == 'push' && ( github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v') ) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION_AWS_CLI=${{ matrix.VERSION_AWS_CLI }}
            VERSION_PYTHON=${{ matrix.VERSION_PYTHON }}
            VERSION_TERRAFORM=${{ matrix.VERSION_TERRAFORM }}

  qa-successful:
    runs-on: ubuntu-20.04
    needs: qa
    if: always()
    steps:
      - name: Success
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

  delete-untagged:
    runs-on: ubuntu-20.04
    needs: qa-successful
    if: github.event_name == 'push' && ( github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v') )
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete all containers from package without tags
        uses: Chizkiyahu/delete-untagged-ghcr-action@bbbab219998078a91c9b283dac9389b825894603 # v3
        with:
            token: ${{ github.token }}
            repository_owner: ${{ github.repository_owner }}
            repository: ${{ github.repository }}
            package_name: containers/infrastructure
            untagged_only: true
            owner_type: user
